// src/pages/api/contact.ts
import { NextApiRequest, NextApiResponse } from 'next'

// –¢–∏–ø—ã –¥–ª—è —Ñ–æ—Ä–º—ã
interface ContactFormData {
  name: string
  email: string
  company?: string
  message: string
  type: 'general' | 'partnership' | 'investor' | 'career'
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' })
  }

  try {
    const { name, email, company, message, type }: ContactFormData = req.body

    // –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ (–ø—Ä—è–º–æ –≤ –∫–æ–¥–µ)
    const TELEGRAM_BOT_TOKEN = '8421391298:AAH8mgMZo5FfN1X8KMspISZYuVadBdtoHJM'
    const TELEGRAM_CHAT_ID = '1053481829'

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    const typeLabels: Record<ContactFormData['type'], string> = {
      general: '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã',
      partnership: '–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ',
      investor: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
      career: '–ö–∞—Ä—å–µ—Ä–∞'
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const telegramMessage = `
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ Asentiq</b>

üë§ <b>–ò–º—è:</b> ${name}
üìß <b>Email:</b> ${email}
üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> ${company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üìã <b>–¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:</b> ${typeLabels[type]}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
${message}

üìÖ <b>–î–∞—Ç–∞:</b> ${new Date().toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    })} (–ú–°–ö)
    `.trim()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: TELEGRAM_CHAT_ID,
          text: telegramMessage,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [
                { text: "‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ", callback_data: "replied" },
                { text: "üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data: "call" }
              ]
            ]
          }
        }),
      }
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Telegram
    if (!telegramResponse.ok) {
      const errorData = await telegramResponse.text()
      console.error('Telegram API error:', errorData)
      throw new Error('Failed to send message to Telegram')
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.status(200).json({ 
      success: true, 
      message: 'Message sent successfully' 
    })

  } catch (error) {
    console.error('Contact form error:', error)
    res.status(500).json({ 
      success: false, 
      message: 'Failed to send message' 
    })
  }
}
